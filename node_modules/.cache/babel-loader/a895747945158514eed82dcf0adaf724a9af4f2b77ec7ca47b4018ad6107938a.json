{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState: {\n    value: 0,\n    interator: -1,\n    ingredients: [],\n    itemCal: []\n  },\n  reducers: {\n    increment: state => {\n      state.interator += 1;\n    },\n    decrement: state => {\n      state.value -= 1;\n    },\n    decrementByAmount: (state, action) => {\n      state.value -= action.payload;\n    },\n    decrementByItem: (state, action) => {\n      state.ingredients.pop();\n    },\n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n    },\n    incrementByItem: (state, action) => {\n      state.ingredients.push(action.payload + \"\");\n    },\n    incrementByItemCal: (state, action) => {\n      state.itemCal.push(action.payload + \"cal \");\n    }\n  }\n});\n\n// Action creators are generated for each case reducer function\nexport const {\n  increment,\n  decrementByAmount,\n  incrementByAmount,\n  incrementByItem,\n  decrementByItem,\n  incrementByItemCal\n} = counterSlice.actions;\nexport default counterSlice.reducer;","map":{"version":3,"names":["createSlice","counterSlice","name","initialState","value","interator","ingredients","itemCal","reducers","increment","state","decrement","decrementByAmount","action","payload","decrementByItem","pop","incrementByAmount","incrementByItem","push","incrementByItemCal","actions","reducer"],"sources":["/Users/randallrouse/Desktop/CalPal/client/src/counterSlice.js"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState: {\n    value: 0,\n    interator: -1,\n    ingredients: [],\n    itemCal:[]\n  },\n  reducers: {\n    increment: (state) => {\n      state.interator += 1\n    },\n\n    \n    decrement: (state) => {\n      state.value -= 1\n    },\n    decrementByAmount: (state, action) => {\n      state.value -= (action.payload)\n    },\n    decrementByItem: (state, action) => {\n      state.ingredients.pop()\n    },\n    incrementByAmount: (state, action) => {\n      state.value += action.payload\n    },\n    incrementByItem: (state, action) => {\n      state.ingredients.push(action.payload + \"\")\n    },\n    incrementByItemCal: (state, action) => {\n      state.itemCal.push(action.payload + \"cal \" )\n    }\n  },\n})\n\n// Action creators are generated for each case reducer function\nexport const { increment, decrementByAmount, incrementByAmount, incrementByItem, decrementByItem, incrementByItemCal } = counterSlice.actions\n\nexport default counterSlice.reducer"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAE9C,OAAO,MAAMC,YAAY,GAAGD,WAAW,CAAC;EACtCE,IAAI,EAAE,SAAS;EACfC,YAAY,EAAE;IACZC,KAAK,EAAE,CAAC;IACRC,SAAS,EAAE,CAAC,CAAC;IACbC,WAAW,EAAE,EAAE;IACfC,OAAO,EAAC;EACV,CAAC;EACDC,QAAQ,EAAE;IACRC,SAAS,EAAGC,KAAK,IAAK;MACpBA,KAAK,CAACL,SAAS,IAAI,CAAC;IACtB,CAAC;IAGDM,SAAS,EAAGD,KAAK,IAAK;MACpBA,KAAK,CAACN,KAAK,IAAI,CAAC;IAClB,CAAC;IACDQ,iBAAiB,EAAEA,CAACF,KAAK,EAAEG,MAAM,KAAK;MACpCH,KAAK,CAACN,KAAK,IAAKS,MAAM,CAACC,OAAQ;IACjC,CAAC;IACDC,eAAe,EAAEA,CAACL,KAAK,EAAEG,MAAM,KAAK;MAClCH,KAAK,CAACJ,WAAW,CAACU,GAAG,EAAE;IACzB,CAAC;IACDC,iBAAiB,EAAEA,CAACP,KAAK,EAAEG,MAAM,KAAK;MACpCH,KAAK,CAACN,KAAK,IAAIS,MAAM,CAACC,OAAO;IAC/B,CAAC;IACDI,eAAe,EAAEA,CAACR,KAAK,EAAEG,MAAM,KAAK;MAClCH,KAAK,CAACJ,WAAW,CAACa,IAAI,CAACN,MAAM,CAACC,OAAO,GAAG,EAAE,CAAC;IAC7C,CAAC;IACDM,kBAAkB,EAAEA,CAACV,KAAK,EAAEG,MAAM,KAAK;MACrCH,KAAK,CAACH,OAAO,CAACY,IAAI,CAACN,MAAM,CAACC,OAAO,GAAG,MAAM,CAAE;IAC9C;EACF;AACF,CAAC,CAAC;;AAEF;AACA,OAAO,MAAM;EAAEL,SAAS;EAAEG,iBAAiB;EAAEK,iBAAiB;EAAEC,eAAe;EAAEH,eAAe;EAAEK;AAAmB,CAAC,GAAGnB,YAAY,CAACoB,OAAO;AAE7I,eAAepB,YAAY,CAACqB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}